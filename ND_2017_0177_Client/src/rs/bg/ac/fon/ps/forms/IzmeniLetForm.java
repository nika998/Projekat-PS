/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rs.bg.ac.fon.ps.forms;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import rs.bg.ac.fon.ps.communication.Response;
import rs.bg.ac.fon.ps.controler.Controller;
import rs.bg.ac.fon.ps.domain.impl.AvioLinija;
import rs.bg.ac.fon.ps.domain.impl.Let;
import rs.bg.ac.fon.ps.table.LetTableModel;

/**
 *
 * @author nikola.dulovic
 */
public class IzmeniLetForm extends javax.swing.JDialog {

    private final Let flight;
    private final LetTableModel flightTableModel;
    private static final String POTVRDI = "Potvrdite izbor";
    private static final String NEPOTPUNO = "Nepotpuni podaci";
    private static final String TIME_FORMAT = "yyyy.MM.dd HH:mm:ss";

    public IzmeniLetForm(java.awt.Dialog parent, boolean modal, Let flight, LetTableModel flightTableModel) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
        this.flight = flight;
        this.flightTableModel = flightTableModel;
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtIdFlight = new javax.swing.JTextField();
        txtStartTime = new javax.swing.JTextField();
        txtEndTime = new javax.swing.JTextField();
        txtCompany = new javax.swing.JTextField();
        cbLines = new javax.swing.JComboBox<>();
        btnEnableEditing = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Podaci o letu");

        jLabel1.setText("Id:");

        jLabel2.setText("Vreme polaska:");

        jLabel3.setText("Vreme dolaska:");

        jLabel4.setText("Prevoznik:");

        jLabel5.setText("Avio linije:");

        cbLines.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnEnableEditing.setText("Dozvoli izmene");
        btnEnableEditing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnableEditingActionPerformed(evt);
            }
        });

        btnEdit.setText("Izmeni");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Obriši");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnCancel.setText("Izađi");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtIdFlight)
                    .addComponent(txtStartTime)
                    .addComponent(txtEndTime)
                    .addComponent(txtCompany)
                    .addComponent(cbLines, 0, 160, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEnableEditing, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtIdFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEnableEditing))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEdit))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(btnDelete)))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtCompany, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cbLines, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(btnCancel)
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Da li ste sigurni da želite da izmenite let?", POTVRDI, JOptionPane.YES_NO_OPTION) == 0) {
            try {

                Date startTime = startTimeValidation();
                Date endTime = endTimeValidation();
                String id = txtIdFlight.getText();
                String company = txtCompany.getText();
                AvioLinija avioLinija = (AvioLinija) cbLines.getSelectedItem();
                
                if (id.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Morate uneti identifikacioni broj leta!", NEPOTPUNO, JOptionPane.WARNING_MESSAGE);
                    return;
                }

                if (startTime == null) {
                    JOptionPane.showMessageDialog(this, "Vreme polaska mora biti u formatu " + TIME_FORMAT + "!", NEPOTPUNO, JOptionPane.WARNING_MESSAGE);
                    return;
                }

                if (endTime == null) {
                    JOptionPane.showMessageDialog(this, "Vreme dolaska mora biti u formatu " + TIME_FORMAT + "!", NEPOTPUNO, JOptionPane.WARNING_MESSAGE);
                    return;
                }

                if (startTime.after(endTime)) {
                    JOptionPane.showMessageDialog(this, "Vreme polaska mora biti pre vremena dolaska!", NEPOTPUNO, JOptionPane.WARNING_MESSAGE);
                    return;
                }

                if (company.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Morate uneti naziv prevoznika!", NEPOTPUNO, JOptionPane.WARNING_MESSAGE);
                    return;
                }
                
                flight.setId(id);
                flight.setLine(avioLinija);
                flight.setEndTime(endTime);
                flight.setStartTime(startTime);
                flight.setCompany(company);

                Response res = Controller.getInstance().editFlight(flight);

                if (res.getException() == null) {
                    flightTableModel.editLetInfo(flight);
                    JOptionPane.showMessageDialog(this, "Sistem je uspešno izmenio let.", "Uspešno izmenjen let", JOptionPane.INFORMATION_MESSAGE);

                } else {
                    JOptionPane.showMessageDialog(this, res.getException().getMessage(), "Neuspešna izmena leta", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Sistem ne može da izmeni let.", "Greška prilikom izmene leta", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnEnableEditingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnableEditingActionPerformed
        btnEnableEditing.setEnabled(false);
        btnEdit.setEnabled(true);
        txtEndTime.setEditable(true);
        txtStartTime.setEditable(true);
        txtCompany.setEditable(true);
        cbLines.setEnabled(true);
    }//GEN-LAST:event_btnEnableEditingActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Da li ste sigurni da želite da obrišete let?\nBrisanjem nestaju svi podaci o prisustvima za ovaj let!", POTVRDI, JOptionPane.YES_NO_OPTION) == 0) {
            try {
                Response res = Controller.getInstance().deleteFlight(flight);

                if (res.getException() == null) {
                    flightTableModel.deleteLetInfo(flight);
                    JOptionPane.showMessageDialog(this, "Sistem je obrisao let.", "Uspešno obrisan let", JOptionPane.INFORMATION_MESSAGE);
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(this, res.getException().getMessage(), "Neuspešno brisanje leta", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Sistem ne može da obriše let.", "Greška prilikom brisanja leta", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Da li ste sigurni da želite da napustite stranicu?", POTVRDI, JOptionPane.YES_NO_OPTION) == 0) {
            this.dispose();
        }
    }//GEN-LAST:event_btnCancelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnEnableEditing;
    private javax.swing.JComboBox<Object> cbLines;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField txtCompany;
    private javax.swing.JTextField txtEndTime;
    private javax.swing.JTextField txtIdFlight;
    private javax.swing.JTextField txtStartTime;
    // End of variables declaration//GEN-END:variables

    private void init() {
        btnEdit.setEnabled(false);
        txtIdFlight.setEditable(false);
        txtEndTime.setEditable(false);
        txtStartTime.setEditable(false);
        txtCompany.setEditable(false);
        cbLines.setEnabled(false);

        populateCbAvioLinije();

        txtIdFlight.setText(flight.getIdFlight());
        txtCompany.setText(flight.getCompany());
        cbLines.setSelectedItem(flight.getLine());
        txtStartTime.setText(new SimpleDateFormat(TIME_FORMAT).format(flight.getStartTime()));
        txtEndTime.setText(new SimpleDateFormat(TIME_FORMAT).format(flight.getEndTime()));

    }

    private void populateCbAvioLinije() {
        try {
            List<AvioLinija> lines = Controller.getInstance().getLinesList();

            cbLines.removeAllItems();
            lines.forEach((line) -> {
                cbLines.addItem(line);
            });

        } catch (Exception ex) {
            Logger.getLogger(IzmeniLetForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private Date startTimeValidation() {
        try {
            String startTimeStr = this.txtStartTime.getText();
            return new SimpleDateFormat(TIME_FORMAT).parse(startTimeStr);
        } catch (ParseException pe) {
            return null;
        }
    }
    
    private Date endTimeValidation() {
        try {
            String endTimeStr = this.txtEndTime.getText();
            return new SimpleDateFormat(TIME_FORMAT).parse(endTimeStr);
        } catch (ParseException pe) {
            return null;
        }
    }

}
