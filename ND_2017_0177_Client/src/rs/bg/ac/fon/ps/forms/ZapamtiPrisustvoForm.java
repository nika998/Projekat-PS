/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rs.bg.ac.fon.ps.forms;

import java.awt.event.ItemEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import rs.bg.ac.fon.ps.communication.Response;
import rs.bg.ac.fon.ps.controler.Controller;
import rs.bg.ac.fon.ps.domain.impl.AvioLinija;
import rs.bg.ac.fon.ps.domain.GenericEntity;
import rs.bg.ac.fon.ps.domain.impl.Let;
import rs.bg.ac.fon.ps.domain.impl.PrisustvoLetu;
import rs.bg.ac.fon.ps.domain.impl.Putnik;
import rs.bg.ac.fon.ps.table.KoriscenjeLinijaTableModel;
import rs.bg.ac.fon.ps.table.PrisustvaTableModel;

/**
 *
 * @author nikola.dulovic
 */
public class ZapamtiPrisustvoForm extends javax.swing.JDialog {

    private PrisustvoLetu attendance;
    private final Putnik passenger;
    private final PrisustvaTableModel attendancesTableModel;
    private final KoriscenjeLinijaTableModel usedLinesTableModel;
    private final PretraziPutnikeForm searchPassengersForm;
    private static final String TIME_FORMAT = "yyyy.MM.dd HH:mm:ss";

    public ZapamtiPrisustvoForm(java.awt.Dialog parent, boolean modal, Putnik passenger, PrisustvaTableModel attendancesTableModel, KoriscenjeLinijaTableModel usedLinesTableModel) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
        attendance = new PrisustvoLetu();
        this.passenger = passenger;
        this.attendancesTableModel = attendancesTableModel;
        this.usedLinesTableModel = usedLinesTableModel;
        searchPassengersForm = (PretraziPutnikeForm) parent;
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblFullName = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblJMBG = new javax.swing.JLabel();
        lblLet = new javax.swing.JLabel();
        cbFlights = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        txtBoardingTime = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cbLines = new javax.swing.JComboBox<>();
        btnSaveAttendance = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Kreiraj prisustvo");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dodavanje novog prisustva"));

        jLabel1.setText("Ime putnika:");

        lblFullName.setText("jLabel2");

        jLabel2.setText("JMBG:");

        lblJMBG.setText("jLabel3");

        lblLet.setText("Let:");

        cbFlights.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("Vreme ukrcavanja:");

        jLabel5.setText("Avio Linija:");

        cbLines.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbLines.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbLinesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(lblLet, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(0, 52, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblFullName, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(lblJMBG, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cbFlights, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBoardingTime, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbLines, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblFullName)
                    .addComponent(jLabel2)
                    .addComponent(lblJMBG))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cbLines, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLet)
                    .addComponent(cbFlights, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBoardingTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(12, 12, 12))
        );

        btnSaveAttendance.setText("Dodaj");
        btnSaveAttendance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAttendanceActionPerformed(evt);
            }
        });

        btnCancel.setText("IzaÄ‘i");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSaveAttendance, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveAttendance)
                    .addComponent(btnCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbLinesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbLinesActionPerformed

    }//GEN-LAST:event_cbLinesActionPerformed

    private void btnSaveAttendanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAttendanceActionPerformed

        if (JOptionPane.showConfirmDialog(this, "Da li ste sigurni da Å¾elite da dodate prisustvo letu?", "Potvrdite izbor", JOptionPane.YES_NO_OPTION) == 0) {
            try {
                Date boardingTime = timeValidation();

                if (boardingTime == null) {
                    JOptionPane.showMessageDialog(this, "Vreme mora biti u formatu " + TIME_FORMAT + "!", "Nepotpuni podaci", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                Let flight = (Let) cbFlights.getSelectedItem();

                if (boardingTime.after(flight.getStartTime())) {
                    JOptionPane.showMessageDialog(this, "Vreme ukrcavanja mora biti pre polaska leta!", "Nepotpuni podaci", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                attendance.setBoardingTime(boardingTime);
                attendance.setFlight(flight);
                attendance.setPassenger(passenger);
                Response res = Controller.getInstance().saveFlightAttendance(attendance);

                if (res.getException() == null) {
                    attendance = (PrisustvoLetu) res.getResponseObj();
                    JOptionPane.showMessageDialog(this, "Sistem je zapamtio prisustvo letu.", "UspeÅ¡no zapamÄ‡eno prisustvo", JOptionPane.INFORMATION_MESSAGE);
                    attendancesTableModel.addAttendance(attendance);
                    if (!usedLinesTableModel.getLinesList().contains(attendance.getFlight().getLine())) {
                        searchPassengersForm.getUsedLines();
                    }
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(this, res.getException().getMessage(), "NeuspeÅ¡no pamÄ‡enje prisustva", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Sistem ne moÅ¾e da zapamti prisustvo letu.", "GreÅ¡ka prilikom pamÄ‡enja", JOptionPane.ERROR_MESSAGE);
            }
        }


    }//GEN-LAST:event_btnSaveAttendanceActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Da li ste sigurni da Å¾elite da napustite stranicu?", "Potvrdite izbor", JOptionPane.YES_NO_OPTION) == 0) {
            this.dispose();
        }
    }//GEN-LAST:event_btnCancelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSaveAttendance;
    private javax.swing.JComboBox<Object> cbFlights;
    private javax.swing.JComboBox<Object> cbLines;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblFullName;
    private javax.swing.JLabel lblJMBG;
    private javax.swing.JLabel lblLet;
    private javax.swing.JTextField txtBoardingTime;
    // End of variables declaration//GEN-END:variables

    private void init() {
        lblFullName.setText(passenger.getName() + " " + passenger.getSurname());
        lblJMBG.setText(passenger.getJmbg());
        lblLet.setVisible(false);
        cbFlights.setVisible(false);

        try {
            List<AvioLinija> lines = Controller.getInstance().getLinesList();

            cbLines.removeAllItems();
            lines.forEach((line) -> {
                cbLines.addItem(line);
            });

            cbLines.addItemListener((ItemEvent e) -> {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    cbItemSelected();
                }
            });

        } catch (Exception ex) {
            Logger.getLogger(ZapamtiPrisustvoForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void cbItemSelected() {
        try {
            AvioLinija line = (AvioLinija) cbLines.getSelectedItem();
            LinkedList<GenericEntity> flights = new LinkedList<>();
            Response res = Controller.getInstance().searchFlightsByLines(line.getId().toString(), flights);

            if (res.getException() == null) {
                List<Let> list1 = (List<Let>) res.getResponseObj();

                cbFlights.removeAllItems();
                list1.forEach((flight) -> {
                    cbFlights.addItem(flight);
                });

                lblLet.setVisible(true);
                cbFlights.setVisible(true);

            } else {
                JOptionPane.showMessageDialog(this, res.getException().getMessage(), "NeuspeÅ¡no pretraÅ¾ivanje letova", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception ex) {
            Logger.getLogger(ZapamtiPrisustvoForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private Date timeValidation() {
        
        Date boardingTime;
        
        try {
            String boardingTimeStr = this.txtBoardingTime.getText();
            boardingTime = new SimpleDateFormat(TIME_FORMAT).parse(boardingTimeStr);
        } catch (ParseException pe) {
            boardingTime = null;
        }
        
        return boardingTime;
    }
}
